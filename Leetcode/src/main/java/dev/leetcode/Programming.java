package dev.leetcode;

import java.util.List;
import java.util.stream.Collectors;

public class Programming {

    /**
     * 389. Find the Difference
     * You are given two strings s and t.
     *
     * String t is generated by random shuffling string s and then add one more letter at a random position.
     * Return the letter that was added to t.
     *
     * Example 1:
     * Input: s = "abcd", t = "abcde"
     * Output: "e"
     * Explanation: 'e' is the letter that was added.
     *
     * Example 2:
     * Input: s = "", t = "y"
     * Output: "y"
     *
     * Constraints:
     * 0 <= s.length <= 1000
     * t.length == s.length + 1
     * s and t consist of lowercase English letters.
     */
    char findDifference(String s, String t) {
        /*
        if(s.isEmpty()) {
            return t.charAt(0);
        }
        List<Character> charArray = s.chars().mapToObj(ch -> (char) ch)
                .collect(Collectors.toList());
        return t.chars()
                .mapToObj(ch -> (char) ch)
                .filter(ch -> !charArray.contains(ch))
                .findFirst().get().charValue();

         */
        if (s == null || s.isEmpty())   return t.charAt(0);

        char ch = t.charAt(t.length()-1);
        for (int idx = 0; idx < s.length(); idx++)  {
            ch ^= (s.charAt(idx) ^ t.charAt(idx));
        }

        return ch;
    }

    /**
     * 1768. Merge Strings Alternately
     * You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.
     * Return the merged string.
     *
     * Example 1:
     * Input: word1 = "abc", word2 = "pqr"
     * Output: "apbqcr"
     * Explanation: The merged string will be merged as so:
     * word1:  a   b   c
     * word2:    p   q   r
     * merged: a p b q c r
     *
     * Example 2:
     * Input: word1 = "ab", word2 = "pqrs"
     * Output: "apbqrs"
     * Explanation: Notice that as word2 is longer, "rs" is appended to the end.
     * word1:  a   b
     * word2:    p   q   r   s
     * merged: a p b q   r   s
     *
     * Example 3:
     * Input: word1 = "abcd", word2 = "pq"
     * Output: "apbqcd"
     * Explanation: Notice that as word1 is longer, "cd" is appended to the end.
     * word1:  a   b   c   d
     * word2:    p   q
     * merged: a p b q c   d
     *
     * Constraints:
     * 1 <= word1.length, word2.length <= 100
     * word1 and word2 consist of lowercase English letters.
     */
    String mergeStrings(String word1, String word2) {
        int wordLen1 = word1.length();
        int wordLen2 = word2.length();

        int maxLength = Math.max(wordLen1, wordLen2);
        int itr=0;

        StringBuilder builder = new StringBuilder();
        while (itr < maxLength) {
            if (itr < wordLen1) builder.append(word1.charAt(itr));
            if (itr < wordLen2) builder.append(word2.charAt(itr));
            itr++;
        }

        return builder.toString();
    }



}
